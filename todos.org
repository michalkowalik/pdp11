* Current Todos
** Unibus [2/3]
- [X] ~ReadIoPage~ and ~WriteIOPage~ are actually wrongly named - they read a Word, not a Page
- [X] Use the memory array defined in Unibus
- [ ] Read/Write Byte in Unibus implementation
  - technically they're done. more testing still needed.

*** MMU [1/1]
- [X] change the way the user / kernel mode is being determined. that boolean is kind of weird. just stick to 0 for user and 3 for kernel

** CPU [4/5]
- [X] what are the ~readByte~, ~readWord~, and ~writeWord~ functions in CPU implementation needed for?
  - they're just a helper methods. nothing nefarious is going on there.
    they decode the virtual address from the opcode's operand and read the memory value using the usual mmmu/unibus combo
- [X] re-enable debug output
- [X] Tests are broken - they should use correct MMU
- [ ] how DC deals with access to the Registers via Unibus address?
  - Not sure if it's at all interesting right now.
- [X] Basic functionality is restored. The simulator still crashes, but at least first 500
      CPU operations are going well. That makes the search for the failure much easier.


** Where it breaks now

+SRC_BEGIN
SR0 000012 R1 177674 R2 177716 R3 021646 R4 000012 R5 177716 R6 177712 R7 177712
[uUN  C]  instr 177710: 177770   TRAP 10 occured: Invalid Instruction
+SRC_END

what is 177770 ? why is it tried to be executed as an instruction

it looks a bit like an UNIBUS address?? (Microprogram break -- whatever it might be)

*** debug
- [ ] dump memory @ Cpu.Trap -> if trap 10 -> dump memory
- [ ] log CPU to file during run
